from typing import Any, Callable, Dict, List, Optional, Type, Union

class FastAPI:
    def __init__(self, **kwargs): ...
    def get(self, path: str, **kwargs) -> Callable[[Callable], Callable]: ...
    def post(self, path: str, **kwargs) -> Callable[[Callable], Callable]: ...
    def put(self, path: str, **kwargs) -> Callable[[Callable], Callable]: ...
    def delete(self, path: str, **kwargs) -> Callable[[Callable], Callable]: ...
    def mount(self, path: str, app: Any, name: Optional[str] = None) -> None: ...
    def add_middleware(self, middleware_class: Type[Any], **kwargs: Any) -> None: ...
    def include_router(self, router: Any, **kwargs: Any) -> None: ...

class HTTPException(Exception):
    def __init__(self, status_code: int, detail: Any = None, headers: Optional[Dict[str, Any]] = None): ...

class Request:
    pass

class Depends:
    def __init__(self, dependency: Optional[Callable[..., Any]] = None): ...

class APIRouter:
    def __init__(self, **kwargs: Any): ...
    def get(self, path: str, **kwargs) -> Callable[[Callable], Callable]: ...
    def post(self, path: str, **kwargs) -> Callable[[Callable], Callable]: ...
    def put(self, path: str, **kwargs) -> Callable[[Callable], Callable]: ...
    def delete(self, path: str, **kwargs) -> Callable[[Callable], Callable]: ...

# Submodules
class staticfiles:
    class StaticFiles:
        def __init__(self, directory: Optional[str] = None, html: bool = False): ...

class middleware:
    class cors:
        class CORSMiddleware:
            def __init__(self, app: Any, allow_origins: Optional[List[str]] = None, 
                        allow_methods: Optional[List[str]] = None, 
                        allow_headers: Optional[List[str]] = None, 
                        allow_credentials: bool = False, 
                        expose_headers: Optional[List[str]] = None, 
                        max_age: int = 600): ...

class responses:
    class FileResponse:
        def __init__(self, path: str, **kwargs): ...
    
    class HTMLResponse:
        def __init__(self, content: Any, status_code: int = 200, 
                    headers: Optional[Dict[str, str]] = None, 
                    media_type: Optional[str] = None): ...

class templating:
    class Jinja2Templates:
        def __init__(self, directory: str): ...
        def TemplateResponse(self, name: str, context: Dict[str, Any], 
                           status_code: int = 200, 
                           headers: Optional[Dict[str, str]] = None, 
                           media_type: Optional[str] = None, 
                           background: Optional[Any] = None): ...
