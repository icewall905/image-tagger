# Type stubs for FastAPI
from typing import Any, Callable, Dict, List, Optional, Type, Union

class FastAPI:
    def __init__(self, **kwargs): ...
    def get(self, path: str, **kwargs) -> Callable[[Callable], Callable]: ...
    def post(self, path: str, **kwargs) -> Callable[[Callable], Callable]: ...
    def put(self, path: str, **kwargs) -> Callable[[Callable], Callable]: ...
    def delete(self, path: str, **kwargs) -> Callable[[Callable], Callable]: ...
    def mount(self, path: str, app: Any, name: Optional[str] = None) -> None: ...
    def add_middleware(self, middleware_class: Type[Any], **kwargs: Any) -> None: ...
    def include_router(self, router: Any, **kwargs: Any) -> None: ...
    def on_event(self, event_type: str) -> Callable[[Callable], Callable]: ...

class HTTPException(Exception):
    def __init__(self, status_code: int, detail: Any = None, headers: Optional[Dict[str, Any]] = None): ...

class Request:
    pass

class Depends:
    def __init__(self, dependency: Optional[Callable[..., Any]] = None): ...

class APIRouter:
    def __init__(self, **kwargs: Any): ...
    def get(self, path: str, **kwargs) -> Callable[[Callable], Callable]: ...
    def post(self, path: str, **kwargs) -> Callable[[Callable], Callable]: ...
    def put(self, path: str, **kwargs) -> Callable[[Callable], Callable]: ...
    def delete(self, path: str, **kwargs) -> Callable[[Callable], Callable]: ...